FISim Software, Copyright (C) 2009 Garcia, F.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, see <http://www.gnu.org/licenses/>.

Content:

1.- Compilation
2.  fisim for motifs similarity
3.  kcmeans for clustering
4.  Website & Comments
5.  Comments


-------------- 1.- Compilation ---------------

Required:
	python2.5 -> http://www.python.org
	python packages: 
		numarray -> http://sourceforge.net/project/showfiles.php?group_id=1369&package_id=32367
		Numeric, numpy, scipy -> http://www.scipy.org
	
Run for compilation

> make

and to clean

> make clean


-------------- 2.- fisim ---------------

Two different usages:

**** Similarity between two motifs ****

Returns the Fuzzy Integral Similarity between two DNA motifs.

Call: python fisim.py -f1 <FileIn1> -f2 <FileIn2> [-o <fileOut>] [-v]

<FileIn1> and <FileIn2>: files describing the position count matrices (PSSM) in Jaspar format, e.g. 'data/A1.mat'. See data/A1.mat as an example. The program assumes the line tag ID to occur first. Next, it searches for the values of the different positions until the EOF is reached. Both files are expected to contain exactly one PSSM.

<fileOut>: file where the output is written. If not set, the standar output will be used.

-v: Verbose mode. If set the output is printed to the standar output.

Output:

Three lines:
	1 FISim value.
	2 Position where the optimal alignment starts.
	3 True if the optimal value was found in the reverse opposite sequence, False otherwise.

Example:

python fisim.py -f1 data/m1.mat -f2 data/m2.mat -o data/example1.txt -v


**** Similarity between a list of motifs ****

Returns a similarity matrix for a list of motifs.

Call: python fisim.py -fileList <FileIn> -o <FileOut> [-core] [-ID]

	<fileList>: files describing the position count matrices (PSSM) in Jaspar format, e.g. 'data/A1.mat'. See data/A1.mat as an example. The program assumes the line tag > to occur first. Next, it searches for the values of the different positions until another tag > is found or the EOF is reached.

	<fileOut>: file where the similarity matrix is written.

	-core: if set the similarities are computed between the cores of the motifs (see paper for more details)

	-ID: if set the ID instead of the name is used for motifs identification

Output:

	A tab separated similarity matrix.

Examples:

	python fisim.py -fileList data/jasparSample.txt -o data/example2.txt -core -ID

	python fisim.py -fileList data/jaspar.txt -o data/example3.txt ---> It might be time consuming


-------------- 3.- kcmeans ---------------

Returns the clustering for a similarity matrix provided by fisim.

Call: python kcmeans.py -fileIn <fileSim> -o <fileOut> -k <numCluster>

	<fileSim>: file containing the similarity matrix to be clustered. The matrix must be of the type of those generated by fisim

	<fileOut>: file where the clustering is written.

	<k>: number of clusters to be found. If k is too big, then a lower number of clusters are retrieved.

Output:

	A text file containg one cluster per line.

Example (assuming it example2.txt was generated):

	python kcmeans.py -fileIn data/example2.txt -o data/clusters.txt -k 5



-------------- 4.- URL ---------------

The source code can be found at http://genome.ugr.es/fisim/


-------------- 5.- Contact ---------------

Send comments, suggestions etc. to fernan@decsai.ugr.es
