from Motif import *
import numpy as N
import matplotlib.pyplot as plt

def computeSimMatrix(motifs,cores,distance=Motif.fisim,verbose=False):
	"""Crea una matriz de similitudes(distancias) comparando uno a uno los motivos de la lista motifs por medio de la medidad de similitud(distancia) especificada en distance.
	Si se cores != [] se calculan las distancias de los cores de los motivos a los motivos en si"""
	mat = N.zeros((len(motifs)+1,len(motifs)+1),dtype=float)
	if verbose: print "Computando la similitud entre " + str(len(motifs)) + " motivos"
	for i in range(len(motifs)):
		if verbose: print "Procesando motivo " + str(i+1)
		for j in range(len(motifs)):
			if len(cores) == 0: mat[i,j] = distance(motifs[i],motifs[j])[0]
			else: mat[i,j] = (distance(cores[i],motifs[j])[0] + distance(motifs[i],cores[j])[0]) / 2 # Hago la media de las dos distancias para obtener una matriz simetrica
	#print mat,

	return mat

def matrix2File(matrix,motifs,fileOut,ID=False):
	"""Escribe en el fichero fileOut la matriz de similitudes(distancias) para los motivos de la lista motifs (utilizada para saber los nombres de los motivos)
	ID es para indicar si se quieren usar los IDs de los motivos como nombres en lugar de los nombres propiamente dichos"""
	#z= N.zerosmatrix 
	f = open(fileOut,'w')
	name = ''
	rows=[]
	for i in range(len(motifs)):
		rows.append(motifs[i].ID)
		matrix[i][-1] = sum(matrix[i])/len(motifs)
		#if ID: f.write('\t' + motifs[i].ID) # primera fila con los IDs
		#else: f.write('\t' + motifs[i].name) # primera fila con los nombres
	matrix = matrix.T
	for i in range(len(motifs)+1):
		rows.append(motifs[i].ID)
		matrix[i][-1] = sum(matrix[i])/len(motifs)
		#if ID: f.write('\t' + motifs[i].ID) # primera fila con los IDs
		#else: f.write('\t' + motifs[i].name) # primera fila con los nombres
	 # plt.pcolor(matrix)
	
	#print len(row.T)
	#print len(matrix.T)
	#print matrix
	matrix = matrix.T
	rows.append("Average")
	row=N.array(rows)
	matrix = matrix.tolist()
	#matrix=N.concatenate((row,matrix), axis=0)
	for i in range(len(motifs)+1):
		matrix[i] = [rows[i]] + matrix[i]
	matrix = N.array(matrix)
	print matrix
	matrix=matrix[N.argsort(matrix[:,-1])]
	#row.append("Averag)
	#print rows
	rows=[]
	for i in range(len(matrix)):
		rows.append(matrix[i][0])
		#matrix[i].pop(0)
	matrix = N.delete(matrix,0,1)
	matrix = matrix.astype(float)
	#print matrix
	#print rows
	plotHeatMap(matrix,rows)
	for i in range(len(motifs)):
		if ID: f.write('\n'+motifs[i].ID) # primera columna con los IDs
		else: f.write('\n'+motifs[i].name) # primera columna con los nombres
		for j in range(len(motifs)+1):
			f.write('\t' + str(matrix[i,j]))
	f.write('\n') # El \n final

def createSimMatrix(motifs,cores,fileOut,distance=Motif.fisim,ID=False,verbose=False):
	"""Crea y escribe en el fichero fileOut una matriz de similitudes(distancias) comparando uno a uno los motivos de la lista motifs por medio de la medidad de similitud(distancia) especificada en distance"""
	mat = computeSimMatrix(motifs,cores,distance=distance,verbose=verbose)
	#print motifs,
	matrix2File(mat,motifs,fileOut,ID=ID)
	
def plotHeatMap(df,rows):
	import pandas as pd
	import matplotlib.pyplot as plt
	import matplotlib.cm as cm
	from numpy.ma import masked_array
	import numpy as np
	#df = np.random.rand(10,6)
	for i in range(len(df[0])-1):
		vars()["c"+str(i)] = masked_array(df, mask=(np.ones_like(df)*(df[0]!=df[0][i]))) 
	c = masked_array(df, mask=(np.ones_like(df)*(df[0]!=df[0][-1])))

	fig,ax = plt.subplots()
	for i in range(len(df[0])-1):
		ax.matshow(vars()["c"+str(i)],cmap=cm.Reds) # You can change the colormap here
	heatmap = ax.matshow(c,cmap=cm.Greens)
	cbar = plt.colorbar(heatmap)
	plt.yticks(np.arange(len(df[1])),rows)
	plt.text(0.5,1.08,'',)
	#plt.xticks(range(len(df[1])))
	#plt.yticks(range(len(df)))
	plt.show()
	#heatmap = plt.pcolor(matrix,cmap=plt.cm.OrRd,edgecolors='k')
	#cbar = plt.colorbar()
	#plt.show()
